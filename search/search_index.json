{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tinylogging","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install tinylogging\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#new-logger","title":"New logger","text":"<pre><code>from tinylogging import Logger, Level\n\nlogger = Logger(name=\"my_logger\", level=Level.DEBUG)\n</code></pre>"},{"location":"#logging-messages","title":"Logging messages","text":"<pre><code>logger.info(\"This is an info message.\")\nlogger.error(\"This is an error message.\")\nlogger.debug(\"This is a debug message.\")\n</code></pre>"},{"location":"#logging-to-a-file","title":"Logging to a file","text":"<pre><code>from tinylogging import FileHandler\n\nfile_handler = FileHandler(file_name=\"app.log\", level=Level.WARNING)\nlogger.handlers.add(file_handler)\n\nlogger.warning(\"This warning will be logged to both console and file.\")\n</code></pre>"},{"location":"#custom-formatting","title":"Custom formatting","text":"<pre><code>from tinylogging import Formatter\n\nformatter = Formatter(template=\"{time} - {name} - {level} - {message}\", colorize=False)\nlogger = Logger(name=\"custom_logger\", formatter=formatter)\nlogger.info(\"This log message uses a custom format.\")\n</code></pre>"},{"location":"#disabling-logging","title":"Disabling logging","text":"<pre><code>logger.disable()\nlogger.info(\"This message will not be logged.\")\nlogger.enable()\n</code></pre>"},{"location":"#async-support","title":"Async support","text":"<pre><code>import asyncio\nfrom tinylogging import AsyncLogger, AsyncFileHandler\n\n\nasync def main():\n    logger = AsyncLogger(name=\"async_logger\")\n\n    file_handler = AsyncFileHandler(file_name=\"app.log\")\n    logger.handlers.add(file_handler)\n\n    await logger.info(\"This is an info message.\")\n    await logger.error(\"This is an error message.\")\n    await logger.debug(\"This is a debug message.\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main)\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"api/","title":"API reference","text":""},{"location":"api/#tinylogging","title":"tinylogging","text":""},{"location":"api/#tinylogging.AsyncLogger","title":"AsyncLogger","text":""},{"location":"api/#tinylogging.AsyncLogger.__init__","title":"__init__","text":"<pre><code>__init__(name: str, level: Level = NOTSET, formatter: Formatter = Formatter(), handlers: set[BaseAsyncHandler] = set()) -&gt; None\n</code></pre> <p>Initializes an asynchronous logger.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger.</p> required <code>level</code> <code>Level</code> <p>The logging level. Defaults to Level.NOTSET.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>The formatter for log messages. Defaults to Formatter().</p> <code>Formatter()</code> <code>handlers</code> <code>set[BaseAsyncHandler]</code> <p>A set of handlers for the logger. Defaults to an empty set.</p> <code>set()</code>"},{"location":"api/#tinylogging.AsyncLogger.log","title":"log  <code>async</code>","text":"<pre><code>log(message: str, level: Level) -&gt; None\n</code></pre> <p>Logs a message at the specified level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>level</code> <code>Level</code> <p>The level at which to log the message.</p> required"},{"location":"api/#tinylogging.AsyncLogger.trace","title":"trace  <code>async</code>","text":"<pre><code>trace(message: str) -&gt; None\n</code></pre> <p>Logs a message with TRACE level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.AsyncLogger.debug","title":"debug  <code>async</code>","text":"<pre><code>debug(message: str) -&gt; None\n</code></pre> <p>Logs a message with DEBUG level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.AsyncLogger.info","title":"info  <code>async</code>","text":"<pre><code>info(message: str) -&gt; None\n</code></pre> <p>Logs a message with INFO level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.AsyncLogger.notice","title":"notice  <code>async</code>","text":"<pre><code>notice(message: str) -&gt; None\n</code></pre> <p>Logs a message with NOTICE level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.AsyncLogger.warning","title":"warning  <code>async</code>","text":"<pre><code>warning(message: str) -&gt; None\n</code></pre> <p>Logs a message with WARNING level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.AsyncLogger.error","title":"error  <code>async</code>","text":"<pre><code>error(message: str) -&gt; None\n</code></pre> <p>Logs a message with ERROR level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.AsyncLogger.critical","title":"critical  <code>async</code>","text":"<pre><code>critical(message: str) -&gt; None\n</code></pre> <p>Logs a message with CRITICAL level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.AsyncLogger.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enables the logger.</p>"},{"location":"api/#tinylogging.AsyncLogger.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disables the logger.</p>"},{"location":"api/#tinylogging.AsyncFileHandler","title":"AsyncFileHandler","text":"<p>               Bases: <code>BaseAsyncHandler</code></p> <p>Asynchronous handler for writing log records to a file.</p>"},{"location":"api/#tinylogging.AsyncFileHandler.__init__","title":"__init__","text":"<pre><code>__init__(file_name: str, level: Level = NOTSET, formatter: Formatter = Formatter(colorize=False)) -&gt; None\n</code></pre> <p>Initializes the AsyncFileHandler.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The name of the file to write log records to.</p> required <code>level</code> <code>Level</code> <p>The logging level threshold for this handler.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>The formatter instance to format log records.</p> <code>Formatter(colorize=False)</code>"},{"location":"api/#tinylogging.AsyncFileHandler.emit","title":"emit  <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the file.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.AsyncStreamHandler","title":"AsyncStreamHandler","text":"<p>               Bases: <code>BaseAsyncHandler</code></p> <p>Asynchronous handler for streaming log records.</p>"},{"location":"api/#tinylogging.AsyncStreamHandler.__init__","title":"__init__","text":"<pre><code>__init__(formatter: Formatter = Formatter(), level: Level = NOTSET, stream: Optional[AsyncFile[str]] = None) -&gt; None\n</code></pre> <p>Initializes the AsyncStreamHandler.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>The formatter instance to format log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>The logging level threshold for this handler.</p> <code>NOTSET</code> <code>stream</code> <code>Optional[AsyncFile[str]]</code> <p>The stream to write log records to.</p> <code>None</code>"},{"location":"api/#tinylogging.AsyncStreamHandler.emit","title":"emit  <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the stream.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.AsyncTelegramHandler","title":"AsyncTelegramHandler","text":"<p>               Bases: <code>BaseAsyncHandler</code></p> <p>Asynchronous handler for sending log records to a Telegram chat.</p>"},{"location":"api/#tinylogging.AsyncTelegramHandler.__init__","title":"__init__","text":"<pre><code>__init__(token: str, chat_id: int | str, message_thread_id: Optional[int] = None, ignore_errors: bool = False, **kwargs: Any) -&gt; None\n</code></pre> <p>Initializes the AsyncTelegramHandler.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The Telegram bot token.</p> required <code>chat_id</code> <code>int | str</code> <p>The chat ID to send log records to.</p> required <code>message_thread_id</code> <code>Optional[int]</code> <p>The message thread ID (optional).</p> <code>None</code> <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors during sending.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the base handler.</p> <code>{}</code>"},{"location":"api/#tinylogging.AsyncTelegramHandler.emit","title":"emit  <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the Telegram chat.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.BaseAsyncHandler","title":"BaseAsyncHandler","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for all async handlers.</p>"},{"location":"api/#tinylogging.BaseAsyncHandler.__init__","title":"__init__","text":"<pre><code>__init__(formatter: Formatter = Formatter(), level: Level = NOTSET) -&gt; None\n</code></pre> <p>Initializes the BaseAsyncHandler.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>The formatter instance to format log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>The logging level threshold for this handler.</p> <code>NOTSET</code>"},{"location":"api/#tinylogging.BaseAsyncHandler.emit","title":"emit  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>This method should be overridden by subclasses.</p>"},{"location":"api/#tinylogging.BaseAsyncHandler.handle","title":"handle  <code>async</code>","text":"<pre><code>handle(record: Record) -&gt; None\n</code></pre> <p>Handle a log record if it meets the logging level threshold.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be handled.</p> required"},{"location":"api/#tinylogging.Formatter","title":"Formatter","text":""},{"location":"api/#tinylogging.Formatter.__init__","title":"__init__","text":"<pre><code>__init__(time_format: str = '[%H:%M:%S]', template: str = '{time} | {level} | {relpath}:{line} | {message}', colorize: bool = True) -&gt; None\n</code></pre> <p>Initializes the Formatter instance.</p> <p>Parameters:</p> Name Type Description Default <code>time_format</code> <code>str</code> <p>The format for the timestamp in log messages.</p> <code>'[%H:%M:%S]'</code> <code>template</code> <code>str</code> <p>The template for formatting log messages.</p> <code>'{time} | {level} | {relpath}:{line} | {message}'</code> <code>colorize</code> <code>bool</code> <p>Whether to colorize the log messages.</p> <code>True</code>"},{"location":"api/#tinylogging.Formatter.format","title":"format","text":"<pre><code>format(record: Record) -&gt; str\n</code></pre> <p>Formats a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to format.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The formatted log message.</p>"},{"location":"api/#tinylogging.Level","title":"Level","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enumeration for logging levels.</p> <p>Attributes:</p> Name Type Description <code>NOTSET</code> <p>No level set.</p> <code>TRACE</code> <p>Trace level for detailed debugging.</p> <code>DEBUG</code> <p>Debug level for general debugging.</p> <code>INFO</code> <p>Informational messages.</p> <code>NOTICE</code> <p>Notice level for normal but significant conditions.</p> <code>WARNING</code> <p>Warning level for potentially harmful situations.</p> <code>ERROR</code> <p>Error level for error events.</p> <code>CRITICAL</code> <p>Critical level for severe error events.</p>"},{"location":"api/#tinylogging.Record","title":"Record  <code>dataclass</code>","text":"<p>Represents a log record.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>The log message.</p> <code>level</code> <code>Level</code> <p>The log level.</p> <code>name</code> <code>str</code> <p>The name of the logger.</p> <code>time</code> <code>datetime</code> <p>The time the log record was created.</p> <code>filename</code> <code>str</code> <p>The name of the file where the log record was created.</p> <code>line</code> <code>int</code> <p>The line number in the file where the log record was created.</p> <code>function</code> <code>str</code> <p>The function name where the log record was created.</p>"},{"location":"api/#tinylogging.Record.basename","title":"basename  <code>property</code>","text":"<pre><code>basename: str\n</code></pre> <p>Gets the base name of the file where the log record was created.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The base name of the file.</p>"},{"location":"api/#tinylogging.Record.relpath","title":"relpath  <code>property</code>","text":"<pre><code>relpath: str\n</code></pre> <p>Gets the relative path of the file where the log record was created.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The relative path of the file.</p>"},{"location":"api/#tinylogging.Record.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__() -&gt; None\n</code></pre> <p>Initializes additional attributes after the dataclass is created.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the stack frame cannot be retrieved.</p>"},{"location":"api/#tinylogging.Record.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Converts the log record to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>A dictionary representation of the log record.</p>"},{"location":"api/#tinylogging.Logger","title":"Logger","text":""},{"location":"api/#tinylogging.Logger.__init__","title":"__init__","text":"<pre><code>__init__(name: str, level: Level = NOTSET, formatter: Formatter = Formatter(), handlers: set[BaseHandler] = set()) -&gt; None\n</code></pre> <p>Initializes a new Logger instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger.</p> required <code>level</code> <code>Level</code> <p>The logging level. Defaults to Level.NOTSET.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>The formatter for log messages. Defaults to Formatter().</p> <code>Formatter()</code> <code>handlers</code> <code>set[BaseHandler]</code> <p>A set of handlers for the logger. Defaults to an empty set.</p> <code>set()</code>"},{"location":"api/#tinylogging.Logger.log","title":"log","text":"<pre><code>log(message: str, level: Level) -&gt; None\n</code></pre> <p>Logs a message with the specified logging level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>level</code> <code>Level</code> <p>The logging level for the message.</p> required"},{"location":"api/#tinylogging.Logger.trace","title":"trace","text":"<pre><code>trace(message: str) -&gt; None\n</code></pre> <p>Logs a message with TRACE level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.Logger.debug","title":"debug","text":"<pre><code>debug(message: str) -&gt; None\n</code></pre> <p>Logs a message with DEBUG level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.Logger.info","title":"info","text":"<pre><code>info(message: str) -&gt; None\n</code></pre> <p>Logs a message with INFO level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.Logger.notice","title":"notice","text":"<pre><code>notice(message: str) -&gt; None\n</code></pre> <p>Logs a message with NOTICE level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.Logger.warning","title":"warning","text":"<pre><code>warning(message: str) -&gt; None\n</code></pre> <p>Logs a message with WARNING level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.Logger.error","title":"error","text":"<pre><code>error(message: str) -&gt; None\n</code></pre> <p>Logs a message with ERROR level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.Logger.critical","title":"critical","text":"<pre><code>critical(message: str) -&gt; None\n</code></pre> <p>Logs a message with CRITICAL level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.Logger.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enables the logger.</p>"},{"location":"api/#tinylogging.Logger.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disables the logger.</p>"},{"location":"api/#tinylogging.BaseHandler","title":"BaseHandler","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for all handlers.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>Formatter instance to format the log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>Logging level for the handler.</p> <code>NOTSET</code>"},{"location":"api/#tinylogging.BaseHandler.emit","title":"emit  <code>abstractmethod</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.BaseHandler.handle","title":"handle","text":"<pre><code>handle(record: Record) -&gt; None\n</code></pre> <p>Handle a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be handled.</p> required"},{"location":"api/#tinylogging.FileHandler","title":"FileHandler","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for writing log records to a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>Name of the file to write log records to.</p> required <code>level</code> <code>Level</code> <p>Logging level for the handler.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>Formatter instance to format the log records.</p> <code>Formatter(colorize=False)</code>"},{"location":"api/#tinylogging.FileHandler.emit","title":"emit","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the file.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.LoggingAdapterHandler","title":"LoggingAdapterHandler","text":"<p>               Bases: <code>Handler</code></p> <p>Adapter handler to integrate with the standard logging module.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>BaseHandler</code> <p>Custom handler to delegate log records to.</p> required"},{"location":"api/#tinylogging.LoggingAdapterHandler.emit","title":"emit","text":"<pre><code>emit(record: LogRecord) -&gt; None\n</code></pre> <p>Emit a log record using the custom handler.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.StreamHandler","title":"StreamHandler","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for streaming log records to a stream.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>Formatter instance to format the log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>Logging level for the handler.</p> <code>NOTSET</code> <code>stream</code> <code>Optional[TextIO]</code> <p>Stream to write log records to.</p> <code>None</code>"},{"location":"api/#tinylogging.StreamHandler.emit","title":"emit","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the stream.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.TelegramHandler","title":"TelegramHandler","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for sending log records to a Telegram chat.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Telegram bot token.</p> required <code>chat_id</code> <code>int | str</code> <p>Chat ID to send messages to.</p> required <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors when sending messages.</p> <code>False</code> <code>message_thread_id</code> <code>Optional[int]</code> <p>ID of the message thread.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the base handler.</p> <code>{}</code>"},{"location":"api/#tinylogging.TelegramHandler.emit","title":"emit","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the Telegram chat.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.aio","title":"aio","text":""},{"location":"api/#tinylogging.aio.AsyncFileHandler","title":"AsyncFileHandler","text":"<p>               Bases: <code>BaseAsyncHandler</code></p> <p>Asynchronous handler for writing log records to a file.</p>"},{"location":"api/#tinylogging.aio.AsyncFileHandler.__init__","title":"__init__","text":"<pre><code>__init__(file_name: str, level: Level = NOTSET, formatter: Formatter = Formatter(colorize=False)) -&gt; None\n</code></pre> <p>Initializes the AsyncFileHandler.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The name of the file to write log records to.</p> required <code>level</code> <code>Level</code> <p>The logging level threshold for this handler.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>The formatter instance to format log records.</p> <code>Formatter(colorize=False)</code>"},{"location":"api/#tinylogging.aio.AsyncFileHandler.emit","title":"emit  <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the file.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.aio.AsyncTelegramHandler","title":"AsyncTelegramHandler","text":"<p>               Bases: <code>BaseAsyncHandler</code></p> <p>Asynchronous handler for sending log records to a Telegram chat.</p>"},{"location":"api/#tinylogging.aio.AsyncTelegramHandler.__init__","title":"__init__","text":"<pre><code>__init__(token: str, chat_id: int | str, message_thread_id: Optional[int] = None, ignore_errors: bool = False, **kwargs: Any) -&gt; None\n</code></pre> <p>Initializes the AsyncTelegramHandler.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The Telegram bot token.</p> required <code>chat_id</code> <code>int | str</code> <p>The chat ID to send log records to.</p> required <code>message_thread_id</code> <code>Optional[int]</code> <p>The message thread ID (optional).</p> <code>None</code> <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors during sending.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the base handler.</p> <code>{}</code>"},{"location":"api/#tinylogging.aio.AsyncTelegramHandler.emit","title":"emit  <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the Telegram chat.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.aio.BaseAsyncHandler","title":"BaseAsyncHandler","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for all async handlers.</p>"},{"location":"api/#tinylogging.aio.BaseAsyncHandler.__init__","title":"__init__","text":"<pre><code>__init__(formatter: Formatter = Formatter(), level: Level = NOTSET) -&gt; None\n</code></pre> <p>Initializes the BaseAsyncHandler.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>The formatter instance to format log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>The logging level threshold for this handler.</p> <code>NOTSET</code>"},{"location":"api/#tinylogging.aio.BaseAsyncHandler.emit","title":"emit  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>This method should be overridden by subclasses.</p>"},{"location":"api/#tinylogging.aio.BaseAsyncHandler.handle","title":"handle  <code>async</code>","text":"<pre><code>handle(record: Record) -&gt; None\n</code></pre> <p>Handle a log record if it meets the logging level threshold.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be handled.</p> required"},{"location":"api/#tinylogging.aio.AsyncLogger","title":"AsyncLogger","text":""},{"location":"api/#tinylogging.aio.AsyncLogger.__init__","title":"__init__","text":"<pre><code>__init__(name: str, level: Level = NOTSET, formatter: Formatter = Formatter(), handlers: set[BaseAsyncHandler] = set()) -&gt; None\n</code></pre> <p>Initializes an asynchronous logger.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger.</p> required <code>level</code> <code>Level</code> <p>The logging level. Defaults to Level.NOTSET.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>The formatter for log messages. Defaults to Formatter().</p> <code>Formatter()</code> <code>handlers</code> <code>set[BaseAsyncHandler]</code> <p>A set of handlers for the logger. Defaults to an empty set.</p> <code>set()</code>"},{"location":"api/#tinylogging.aio.AsyncLogger.log","title":"log  <code>async</code>","text":"<pre><code>log(message: str, level: Level) -&gt; None\n</code></pre> <p>Logs a message at the specified level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>level</code> <code>Level</code> <p>The level at which to log the message.</p> required"},{"location":"api/#tinylogging.aio.AsyncLogger.trace","title":"trace  <code>async</code>","text":"<pre><code>trace(message: str) -&gt; None\n</code></pre> <p>Logs a message with TRACE level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.aio.AsyncLogger.debug","title":"debug  <code>async</code>","text":"<pre><code>debug(message: str) -&gt; None\n</code></pre> <p>Logs a message with DEBUG level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.aio.AsyncLogger.info","title":"info  <code>async</code>","text":"<pre><code>info(message: str) -&gt; None\n</code></pre> <p>Logs a message with INFO level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.aio.AsyncLogger.notice","title":"notice  <code>async</code>","text":"<pre><code>notice(message: str) -&gt; None\n</code></pre> <p>Logs a message with NOTICE level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.aio.AsyncLogger.warning","title":"warning  <code>async</code>","text":"<pre><code>warning(message: str) -&gt; None\n</code></pre> <p>Logs a message with WARNING level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.aio.AsyncLogger.error","title":"error  <code>async</code>","text":"<pre><code>error(message: str) -&gt; None\n</code></pre> <p>Logs a message with ERROR level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.aio.AsyncLogger.critical","title":"critical  <code>async</code>","text":"<pre><code>critical(message: str) -&gt; None\n</code></pre> <p>Logs a message with CRITICAL level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.aio.AsyncLogger.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enables the logger.</p>"},{"location":"api/#tinylogging.aio.AsyncLogger.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disables the logger.</p>"},{"location":"api/#tinylogging.aio.handlers","title":"handlers","text":""},{"location":"api/#tinylogging.aio.handlers.BaseAsyncHandler","title":"BaseAsyncHandler","text":"<p>               Bases: <code>ABC</code></p> <p>Base class for all async handlers.</p>"},{"location":"api/#tinylogging.aio.handlers.BaseAsyncHandler.__init__","title":"__init__","text":"<pre><code>__init__(formatter: Formatter = Formatter(), level: Level = NOTSET) -&gt; None\n</code></pre> <p>Initializes the BaseAsyncHandler.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>The formatter instance to format log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>The logging level threshold for this handler.</p> <code>NOTSET</code>"},{"location":"api/#tinylogging.aio.handlers.BaseAsyncHandler.emit","title":"emit  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>This method should be overridden by subclasses.</p>"},{"location":"api/#tinylogging.aio.handlers.BaseAsyncHandler.handle","title":"handle  <code>async</code>","text":"<pre><code>handle(record: Record) -&gt; None\n</code></pre> <p>Handle a log record if it meets the logging level threshold.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be handled.</p> required"},{"location":"api/#tinylogging.aio.handlers.AsyncStreamHandler","title":"AsyncStreamHandler","text":"<p>               Bases: <code>BaseAsyncHandler</code></p> <p>Asynchronous handler for streaming log records.</p>"},{"location":"api/#tinylogging.aio.handlers.AsyncStreamHandler.__init__","title":"__init__","text":"<pre><code>__init__(formatter: Formatter = Formatter(), level: Level = NOTSET, stream: Optional[AsyncFile[str]] = None) -&gt; None\n</code></pre> <p>Initializes the AsyncStreamHandler.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>The formatter instance to format log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>The logging level threshold for this handler.</p> <code>NOTSET</code> <code>stream</code> <code>Optional[AsyncFile[str]]</code> <p>The stream to write log records to.</p> <code>None</code>"},{"location":"api/#tinylogging.aio.handlers.AsyncStreamHandler.emit","title":"emit  <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the stream.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.aio.handlers.AsyncFileHandler","title":"AsyncFileHandler","text":"<p>               Bases: <code>BaseAsyncHandler</code></p> <p>Asynchronous handler for writing log records to a file.</p>"},{"location":"api/#tinylogging.aio.handlers.AsyncFileHandler.__init__","title":"__init__","text":"<pre><code>__init__(file_name: str, level: Level = NOTSET, formatter: Formatter = Formatter(colorize=False)) -&gt; None\n</code></pre> <p>Initializes the AsyncFileHandler.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The name of the file to write log records to.</p> required <code>level</code> <code>Level</code> <p>The logging level threshold for this handler.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>The formatter instance to format log records.</p> <code>Formatter(colorize=False)</code>"},{"location":"api/#tinylogging.aio.handlers.AsyncFileHandler.emit","title":"emit  <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the file.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.aio.handlers.AsyncTelegramHandler","title":"AsyncTelegramHandler","text":"<p>               Bases: <code>BaseAsyncHandler</code></p> <p>Asynchronous handler for sending log records to a Telegram chat.</p>"},{"location":"api/#tinylogging.aio.handlers.AsyncTelegramHandler.__init__","title":"__init__","text":"<pre><code>__init__(token: str, chat_id: int | str, message_thread_id: Optional[int] = None, ignore_errors: bool = False, **kwargs: Any) -&gt; None\n</code></pre> <p>Initializes the AsyncTelegramHandler.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The Telegram bot token.</p> required <code>chat_id</code> <code>int | str</code> <p>The chat ID to send log records to.</p> required <code>message_thread_id</code> <code>Optional[int]</code> <p>The message thread ID (optional).</p> <code>None</code> <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors during sending.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the base handler.</p> <code>{}</code>"},{"location":"api/#tinylogging.aio.handlers.AsyncTelegramHandler.emit","title":"emit  <code>async</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the Telegram chat.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.formatter","title":"formatter","text":""},{"location":"api/#tinylogging.formatter.Formatter","title":"Formatter","text":""},{"location":"api/#tinylogging.formatter.Formatter.__init__","title":"__init__","text":"<pre><code>__init__(time_format: str = '[%H:%M:%S]', template: str = '{time} | {level} | {relpath}:{line} | {message}', colorize: bool = True) -&gt; None\n</code></pre> <p>Initializes the Formatter instance.</p> <p>Parameters:</p> Name Type Description Default <code>time_format</code> <code>str</code> <p>The format for the timestamp in log messages.</p> <code>'[%H:%M:%S]'</code> <code>template</code> <code>str</code> <p>The template for formatting log messages.</p> <code>'{time} | {level} | {relpath}:{line} | {message}'</code> <code>colorize</code> <code>bool</code> <p>Whether to colorize the log messages.</p> <code>True</code>"},{"location":"api/#tinylogging.formatter.Formatter.format","title":"format","text":"<pre><code>format(record: Record) -&gt; str\n</code></pre> <p>Formats a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to format.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The formatted log message.</p>"},{"location":"api/#tinylogging.helpers","title":"helpers","text":""},{"location":"api/#tinylogging.helpers.TelegramFormatter","title":"TelegramFormatter","text":"<p>               Bases: <code>Formatter</code></p>"},{"location":"api/#tinylogging.helpers.TelegramFormatter.__init__","title":"__init__","text":"<pre><code>__init__(time_format: str = '%H:%M:%S')\n</code></pre> <p>Initializes the TelegramFormatter with a specific time format and template.</p> <p>Parameters:</p> Name Type Description Default <code>time_format</code> <code>str</code> <p>The format string for formatting the time. Defaults to \"%H:%M:%S\".</p> <code>'%H:%M:%S'</code>"},{"location":"api/#tinylogging.helpers.TelegramFormatter.format","title":"format","text":"<pre><code>format(record: Record) -&gt; str\n</code></pre> <p>Formats a log record into a string suitable for Telegram.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to format.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The formatted log record as a string.</p>"},{"location":"api/#tinylogging.level","title":"level","text":""},{"location":"api/#tinylogging.level.Level","title":"Level","text":"<p>               Bases: <code>IntEnum</code></p> <p>Enumeration for logging levels.</p> <p>Attributes:</p> Name Type Description <code>NOTSET</code> <p>No level set.</p> <code>TRACE</code> <p>Trace level for detailed debugging.</p> <code>DEBUG</code> <p>Debug level for general debugging.</p> <code>INFO</code> <p>Informational messages.</p> <code>NOTICE</code> <p>Notice level for normal but significant conditions.</p> <code>WARNING</code> <p>Warning level for potentially harmful situations.</p> <code>ERROR</code> <p>Error level for error events.</p> <code>CRITICAL</code> <p>Critical level for severe error events.</p>"},{"location":"api/#tinylogging.record","title":"record","text":""},{"location":"api/#tinylogging.record.Record","title":"Record  <code>dataclass</code>","text":"<p>Represents a log record.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>The log message.</p> <code>level</code> <code>Level</code> <p>The log level.</p> <code>name</code> <code>str</code> <p>The name of the logger.</p> <code>time</code> <code>datetime</code> <p>The time the log record was created.</p> <code>filename</code> <code>str</code> <p>The name of the file where the log record was created.</p> <code>line</code> <code>int</code> <p>The line number in the file where the log record was created.</p> <code>function</code> <code>str</code> <p>The function name where the log record was created.</p>"},{"location":"api/#tinylogging.record.Record.basename","title":"basename  <code>property</code>","text":"<pre><code>basename: str\n</code></pre> <p>Gets the base name of the file where the log record was created.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The base name of the file.</p>"},{"location":"api/#tinylogging.record.Record.relpath","title":"relpath  <code>property</code>","text":"<pre><code>relpath: str\n</code></pre> <p>Gets the relative path of the file where the log record was created.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The relative path of the file.</p>"},{"location":"api/#tinylogging.record.Record.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__() -&gt; None\n</code></pre> <p>Initializes additional attributes after the dataclass is created.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the stack frame cannot be retrieved.</p>"},{"location":"api/#tinylogging.record.Record.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict[str, Any]\n</code></pre> <p>Converts the log record to a dictionary.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any]</code> <p>A dictionary representation of the log record.</p>"},{"location":"api/#tinylogging.sync","title":"sync","text":""},{"location":"api/#tinylogging.sync.Formatter","title":"Formatter","text":""},{"location":"api/#tinylogging.sync.Formatter.__init__","title":"__init__","text":"<pre><code>__init__(time_format: str = '[%H:%M:%S]', template: str = '{time} | {level} | {relpath}:{line} | {message}', colorize: bool = True) -&gt; None\n</code></pre> <p>Initializes the Formatter instance.</p> <p>Parameters:</p> Name Type Description Default <code>time_format</code> <code>str</code> <p>The format for the timestamp in log messages.</p> <code>'[%H:%M:%S]'</code> <code>template</code> <code>str</code> <p>The template for formatting log messages.</p> <code>'{time} | {level} | {relpath}:{line} | {message}'</code> <code>colorize</code> <code>bool</code> <p>Whether to colorize the log messages.</p> <code>True</code>"},{"location":"api/#tinylogging.sync.Formatter.format","title":"format","text":"<pre><code>format(record: Record) -&gt; str\n</code></pre> <p>Formats a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to format.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The formatted log message.</p>"},{"location":"api/#tinylogging.sync.BaseHandler","title":"BaseHandler","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for all handlers.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>Formatter instance to format the log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>Logging level for the handler.</p> <code>NOTSET</code>"},{"location":"api/#tinylogging.sync.BaseHandler.emit","title":"emit  <code>abstractmethod</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.sync.BaseHandler.handle","title":"handle","text":"<pre><code>handle(record: Record) -&gt; None\n</code></pre> <p>Handle a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be handled.</p> required"},{"location":"api/#tinylogging.sync.FileHandler","title":"FileHandler","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for writing log records to a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>Name of the file to write log records to.</p> required <code>level</code> <code>Level</code> <p>Logging level for the handler.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>Formatter instance to format the log records.</p> <code>Formatter(colorize=False)</code>"},{"location":"api/#tinylogging.sync.FileHandler.emit","title":"emit","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the file.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.sync.LoggingAdapterHandler","title":"LoggingAdapterHandler","text":"<p>               Bases: <code>Handler</code></p> <p>Adapter handler to integrate with the standard logging module.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>BaseHandler</code> <p>Custom handler to delegate log records to.</p> required"},{"location":"api/#tinylogging.sync.LoggingAdapterHandler.emit","title":"emit","text":"<pre><code>emit(record: LogRecord) -&gt; None\n</code></pre> <p>Emit a log record using the custom handler.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.sync.TelegramHandler","title":"TelegramHandler","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for sending log records to a Telegram chat.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Telegram bot token.</p> required <code>chat_id</code> <code>int | str</code> <p>Chat ID to send messages to.</p> required <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors when sending messages.</p> <code>False</code> <code>message_thread_id</code> <code>Optional[int]</code> <p>ID of the message thread.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the base handler.</p> <code>{}</code>"},{"location":"api/#tinylogging.sync.TelegramHandler.emit","title":"emit","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the Telegram chat.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.sync.Logger","title":"Logger","text":""},{"location":"api/#tinylogging.sync.Logger.__init__","title":"__init__","text":"<pre><code>__init__(name: str, level: Level = NOTSET, formatter: Formatter = Formatter(), handlers: set[BaseHandler] = set()) -&gt; None\n</code></pre> <p>Initializes a new Logger instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger.</p> required <code>level</code> <code>Level</code> <p>The logging level. Defaults to Level.NOTSET.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>The formatter for log messages. Defaults to Formatter().</p> <code>Formatter()</code> <code>handlers</code> <code>set[BaseHandler]</code> <p>A set of handlers for the logger. Defaults to an empty set.</p> <code>set()</code>"},{"location":"api/#tinylogging.sync.Logger.log","title":"log","text":"<pre><code>log(message: str, level: Level) -&gt; None\n</code></pre> <p>Logs a message with the specified logging level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required <code>level</code> <code>Level</code> <p>The logging level for the message.</p> required"},{"location":"api/#tinylogging.sync.Logger.trace","title":"trace","text":"<pre><code>trace(message: str) -&gt; None\n</code></pre> <p>Logs a message with TRACE level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.sync.Logger.debug","title":"debug","text":"<pre><code>debug(message: str) -&gt; None\n</code></pre> <p>Logs a message with DEBUG level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.sync.Logger.info","title":"info","text":"<pre><code>info(message: str) -&gt; None\n</code></pre> <p>Logs a message with INFO level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.sync.Logger.notice","title":"notice","text":"<pre><code>notice(message: str) -&gt; None\n</code></pre> <p>Logs a message with NOTICE level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.sync.Logger.warning","title":"warning","text":"<pre><code>warning(message: str) -&gt; None\n</code></pre> <p>Logs a message with WARNING level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.sync.Logger.error","title":"error","text":"<pre><code>error(message: str) -&gt; None\n</code></pre> <p>Logs a message with ERROR level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.sync.Logger.critical","title":"critical","text":"<pre><code>critical(message: str) -&gt; None\n</code></pre> <p>Logs a message with CRITICAL level.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"api/#tinylogging.sync.Logger.enable","title":"enable","text":"<pre><code>enable() -&gt; None\n</code></pre> <p>Enables the logger.</p>"},{"location":"api/#tinylogging.sync.Logger.disable","title":"disable","text":"<pre><code>disable() -&gt; None\n</code></pre> <p>Disables the logger.</p>"},{"location":"api/#tinylogging.sync.handlers","title":"handlers","text":""},{"location":"api/#tinylogging.sync.handlers.BaseHandler","title":"BaseHandler","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for all handlers.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>Formatter instance to format the log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>Logging level for the handler.</p> <code>NOTSET</code>"},{"location":"api/#tinylogging.sync.handlers.BaseHandler.emit","title":"emit  <code>abstractmethod</code>","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.sync.handlers.BaseHandler.handle","title":"handle","text":"<pre><code>handle(record: Record) -&gt; None\n</code></pre> <p>Handle a log record.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be handled.</p> required"},{"location":"api/#tinylogging.sync.handlers.StreamHandler","title":"StreamHandler","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for streaming log records to a stream.</p> <p>Parameters:</p> Name Type Description Default <code>formatter</code> <code>Formatter</code> <p>Formatter instance to format the log records.</p> <code>Formatter()</code> <code>level</code> <code>Level</code> <p>Logging level for the handler.</p> <code>NOTSET</code> <code>stream</code> <code>Optional[TextIO]</code> <p>Stream to write log records to.</p> <code>None</code>"},{"location":"api/#tinylogging.sync.handlers.StreamHandler.emit","title":"emit","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the stream.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.sync.handlers.FileHandler","title":"FileHandler","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for writing log records to a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>Name of the file to write log records to.</p> required <code>level</code> <code>Level</code> <p>Logging level for the handler.</p> <code>NOTSET</code> <code>formatter</code> <code>Formatter</code> <p>Formatter instance to format the log records.</p> <code>Formatter(colorize=False)</code>"},{"location":"api/#tinylogging.sync.handlers.FileHandler.emit","title":"emit","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the file.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.sync.handlers.LoggingAdapterHandler","title":"LoggingAdapterHandler","text":"<p>               Bases: <code>Handler</code></p> <p>Adapter handler to integrate with the standard logging module.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>BaseHandler</code> <p>Custom handler to delegate log records to.</p> required"},{"location":"api/#tinylogging.sync.handlers.LoggingAdapterHandler.emit","title":"emit","text":"<pre><code>emit(record: LogRecord) -&gt; None\n</code></pre> <p>Emit a log record using the custom handler.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>The log record to be emitted.</p> required"},{"location":"api/#tinylogging.sync.handlers.TelegramHandler","title":"TelegramHandler","text":"<p>               Bases: <code>BaseHandler</code></p> <p>Handler for sending log records to a Telegram chat.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Telegram bot token.</p> required <code>chat_id</code> <code>int | str</code> <p>Chat ID to send messages to.</p> required <code>ignore_errors</code> <code>bool</code> <p>Whether to ignore errors when sending messages.</p> <code>False</code> <code>message_thread_id</code> <code>Optional[int]</code> <p>ID of the message thread.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments for the base handler.</p> <code>{}</code>"},{"location":"api/#tinylogging.sync.handlers.TelegramHandler.emit","title":"emit","text":"<pre><code>emit(record: Record) -&gt; None\n</code></pre> <p>Emit a log record to the Telegram chat.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>Record</code> <p>The log record to be emitted.</p> required"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Method <code>to_dict</code> for the <code>Record</code> class</li> <li>Documentation for project (#6)</li> <li>Typings for project</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li><code>COLOR_MAP</code> from <code>tinylogging.__init__.py</code></li> </ul>"},{"location":"changelog/#420-2025-01-17","title":"[4.2.0] - 2025-01-17","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Optional parameter <code>message_thread_id</code> for handlers <code>AsyncTelegramHandler</code> and <code>TelegramHandler</code></li> </ul>"},{"location":"changelog/#410-2025-01-17","title":"[4.1.0] - 2025-01-17","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Added emoji support for log levels in <code>Formatter</code></li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Changed the default time format in <code>TelegramFormatter</code> from <code>[%H:%M:%S]</code> to <code>%H:%M:%S</code></li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed an issue where messages could be displayed even when the logger was disabled</li> </ul>"},{"location":"changelog/#400-2025-01-14","title":"[4.0.0] - 2025-01-14","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Handler for sending logs to Telegram (<code>AsyncTelegramHandler</code>, <code>TelegramHandler</code>) (#4)</li> <li>New formatter <code>TelegramFormatter</code> for processing and formatting messages sent to Telegram</li> <li>New dependency: <code>httpx</code> for working with the Telegram API</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>Dropped support for Python 3.8</li> </ul>"},{"location":"changelog/#330-2025-01-11","title":"[3.3.0] - 2025-01-11","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed an issue in <code>LoggingAdapterHandler</code> where the attributes <code>filename</code>, <code>function</code>, and <code>line</code> were not set for the <code>Record</code> object</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Reorganized imports</li> </ul>"},{"location":"changelog/#320-2024-11-01","title":"[3.2.0] - 2024-11-01","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Error in detecting stack depth (#3)</li> </ul>"},{"location":"changelog/#310-2024-10-31","title":"[3.1.0] - 2024-10-31","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>New attributes for the <code>Record</code> class: <code>filename</code>, <code>line</code>, <code>basename</code>, <code>relpath</code>, <code>function</code></li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>In the default template (attribute <code>template</code>) for the <code>Formatter</code> class, the relative path to the file and line are displayed</li> </ul>"},{"location":"changelog/#300-2024-10-13","title":"[3.0.0] - 2024-10-13","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Asynchronous support</li> <li>New dependency: <code>anyio</code></li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Changed structure and module imports for better code organization</li> </ul>"},{"location":"changelog/#220-2024-10-05","title":"[2.2.0] - 2024-10-05","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Issue #2</li> </ul>"},{"location":"changelog/#210-2024-10-05","title":"[2.1.0] - 2024-10-05","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li><code>LoggingAdapterHandler</code>: an adapter for integration with the <code>logging</code> module allowing the use of custom handlers (<code>BaseHandler</code>, <code>StreamHandler</code>, etc.) with standard Python loggers</li> </ul>"},{"location":"changelog/#200-2024-10-04","title":"[2.0.0] - 2024-10-04","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Issue #1</li> </ul>"},{"location":"changelog/#100-2024-10-04","title":"[1.0.0] - 2024-10-04","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Initial release</li> </ul>"}]}